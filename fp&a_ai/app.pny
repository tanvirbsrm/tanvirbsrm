import streamlit as st
import pandas as pd
import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    st.error("GROQ_API_KEY is not set. Please create a .env file with your API key.")
    st.stop()

# App Title and Description
st.title("Financial Analysis & AI Assistant")
st.markdown("""
This app provides comprehensive financial analysis by:
- Tracking expenses
- Forecasting cash flow and revenue trends
- Recommending budgets and cost optimizations
- Monitoring fraud and compliance
- Simulating scenarios and more

Upload your data file (Excel, CSV, or PDF) to get started.
""")

# File uploader: Accept Excel, CSV, or PDF
uploaded_file = st.file_uploader("Upload your data file", type=["xlsx", "xls", "csv", "pdf"])

# Function to process uploaded file
def process_file(file) -> pd.DataFrame:
    file_extension = file.name.split(".")[-1].lower()
    data = None

    if file_extension in ["xlsx", "xls"]:
        try:
            data = pd.read_excel(file)
        except Exception as e:
            st.error(f"Error reading Excel file: {e}")
    elif file_extension == "csv":
        try:
            data = pd.read_csv(file)
        except Exception as e:
            st.error(f"Error reading CSV file: {e}")
    elif file_extension == "pdf":
        try:
            # For PDFs, extract text (using PyPDF2 as an example)
            import PyPDF2
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()
            # Create a DataFrame with the extracted text for preview purposes
            data = pd.DataFrame({"Extracted_Text": [text]})
        except Exception as e:
            st.error(f"Error reading PDF file: {e}")
    else:
        st.error("Unsupported file format.")
    return data

# Process and preview the uploaded data
if uploaded_file is not None:
    data = process_file(uploaded_file)
    if data is not None:
        st.subheader("Data Preview")
        st.dataframe(data.head(10))
    else:
        st.error("No data to display.")

# Run AI Analysis when the action button is clicked
if st.button("Run AI Analysis") and uploaded_file is not None and data is not None:
    st.info("Running AI analysis. Please wait...")

    # Build a structured prompt based on uploaded data
    # Here we include a small preview (first 10 rows converted to CSV) for context.
    data_preview_csv = data.head(10).to_csv(index=False)
    prompt = f"""
    Please analyze the following data and provide comprehensive insights, forecasts, summaries, and recommendations. 
    This analysis should cover the following financial tools:
    
    - **Expense Tracker:** Manages spending
    - **Trend Analysis:** Cash required forecast
    - **Cash Flow Predictor:** Forecasts cash trends
    - **Budget Recommender:** Allocates spending
    - **Fraud Monitor:** Identifies anomalies
    - **Report Generator:** Creates financial reports
    - **Market Analyzer:** Forecasts market changes
    - **Risk Analyzer:** Scores financial risks
    - **Scenario Simulator:** “What-if” scenarios
    - **Forecast Assistant:** Updates rolling forecasts
    - **KPI Automated Dashboard:** Real-time metrics
    - **Cost Optimizer:** Reduces operational costs
    - **Audit Assistant:** Assists compliance
    - **Revenue Analyzer:** Tracks revenue performance
    - **Capital Optimizer:** Allocates capital wisely
    - **Contract Analyzer:** Reviews legal contracts
    - **Benchmarking Tool:** Compares performance to peers
    - **Churn Predictor:** Warns about customer attrition
    - **Data Quality Checker:** Validates data accuracy
    - **Revenue Forecast Tools:** Predicts future revenue
    - **Inventory Value and Consumption Analyzer:** Consumption analysis and trend set
    
    **Data Sample for Analysis:**
    {data_preview_csv}
    """

    # Prepare API payload
    payload = {
        "prompt": prompt,
        "parameters": {
            "max_tokens": 500,
            "temperature": 0.7
        }
    }
    
    # Placeholder URL for GROQ LLM API endpoint; replace with your actual endpoint
    api_url = "https://api.groq.com/v1/analyze"  
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(api_url, json=payload, headers=headers)
        if response.status_code == 200:
            result = response.json()
            # Assume the API returns analysis in the 'analysis' field
            output_text = result.get("analysis", "No analysis returned by the API.")
            
            # Display the analysis output in a styled container using markdown
            st.markdown("## Analysis Results")
            st.markdown(output_text)
        else:
            st.error(f"API request failed with status code {response.status_code}: {response.text}")
    except Exception as e:
        st.error(f"An error occurred while calling the API: {e}")

elif st.button("Run AI Analysis"):
    st.error("Please upload a valid file before running the analysis.")
